/**
    Vi·∫øt c√°c h√†m trong JWT middleware (requireRole requireRoles) v·ªõi c√°c ch·ª©c nƒÉng sau:
    - L·∫•y jwt Token t·ª´ header c·ªßa request v√† ki·ªÉm tra xem token c√≥ h·ª£p l·ªá v√† c√≤n h·∫°n kh√¥ng
    - l·∫•y ra user'id t·ª´ token v√† query xu·ªëng database xem user n√†y c√≥ b·ªã block hay kh√¥ng
    - l·∫•y ra role c·ªßa user v√† ki·ªÉm tra xem role ƒë√≥ c√≥ ph√π h·ª£p v·ªõi ƒë·∫ßu v√†o c·ªßa c√°c h√†m requireRole requireRoles kh√¥ng

    app.get('api/private', requireRole('AD'), (req, res) => {
        res.send('Ch·ªâ d√†nh cho admin');
    }
*/

import authenticateToken from '../helpers/tokenHelper';
/**
 * üéØ Middleware: Y√™u c·∫ßu m·ªôt trong c√°c vai tr√≤
 * @param {string[]} roles - M·∫£ng vai tr√≤ cho ph√©p (v√≠ d·ª•: ['AD', 'MOD'])
 */
export const requireRoles = (roles = []) => [
    authenticateToken, // ‚úÖ Middleware x√°c th·ª±c token tr∆∞·ªõc
    (req, res, next) => {
        if (!roles.includes(req.user.userType) && roles.length !== 0) {
            return res.status(403).json({ message: '‚ùå B·∫°n kh√¥ng c√≥ quy·ªÅn truy c·∫≠p.' });
        }

        next();
    },
];




