import { Sequelize } from "../models";
import db from "../models";
import ResponseClass from "../dtos/responses/class/ClassResponse";
const { Class } = db;
import StudentClassStatus from "../constants/StudentClassStatus";

// LopController.js
// L·∫•y danh s√°ch t·∫•t c·∫£ c√°c l·ªõp h·ªçc
// GET http://localhost:3000/api/v1/Class?search=...
export const getPublicClass = async (req, res) => {
    const search = req.query.search || '';
    const page = parseInt(req.query.page, 10) || 1;
    const limit = parseInt(req.query.limit, 10) || 10;
    const offset = (page - 1) * limit;

    // üìÑ Thi·∫øt l·∫≠p ƒëi·ªÅu ki·ªán t√¨m ki·∫øm
    const whereClause = {
        public: true, // Th√™m ƒëi·ªÅu ki·ªán public = true
        ...(search.trim() && {
            [Op.or]: [
                { name: { [Op.like]: `%${search}%` } },
                { description: { [Op.like]: `%${search}%` } },
                { status: { [Op.like]: `%${search}%` } },
            ],
        }),
    };

    // üì• Truy v·∫•n l·ªõp
    const { rows: classes, count: total } = await Class.findAndCountAll({
        where: whereClause,
        limit,
        offset,
        order: [['createdAt', 'DESC']],
    });

    return res.status(200).json({
        message: '‚úÖ L·∫•y danh s√°ch l·ªõp th√†nh c√¥ng!',
        data: classes,
        currentPage: page,
        totalPages: Math.ceil(total / limit),
        totalItems: total,
    });
};

export const getAllClass = async (req, res) => {
    const search = req.query.search || '';
    const page = parseInt(req.query.page, 10) || 1;
    const limit = parseInt(req.query.limit, 10) || 10;
    const offset = (page - 1) * limit;

    // üìÑ Thi·∫øt l·∫≠p ƒëi·ªÅu ki·ªán t√¨m ki·∫øm
    const whereClause = {
        ...(search.trim() && {
            [Op.or]: [
                { name: { [Op.like]: `%${search}%` } },
                { description: { [Op.like]: `%${search}%` } },
                { status: { [Op.like]: `%${search}%` } },
            ],
        }),
    };

    // üì• Truy v·∫•n l·ªõp
    const { rows: classes, count: total } = await Class.findAndCountAll({
        where: whereClause,
        limit,
        offset,
        order: [['createdAt', 'DESC']],
    });

    return res.status(200).json({
        message: '‚úÖ L·∫•y danh s√°ch l·ªõp th√†nh c√¥ng!',
        data: classes,
        currentPage: page,
        totalPages: Math.ceil(total / limit),
        totalItems: total,
    });
};

// L·∫•y chi ti·∫øt m·ªôt l·ªõp h·ªçc theo id
// GET http://localhost:3000/api/lop/:id
export const getDetailClassByAdmin = async (req, res) => {
    const id = req.params.id;

    // Truy v·∫•n l·ªõp theo id
    const classItem = await db.Class.findOne({ where: { id } });

    if (!classItem) {
        return res.status(404).json({
            message: `Kh√¥ng t√¨m th·∫•y l·ªõp v·ªõi ID: ${id}!`
        });
    }

    return res.status(200).json({
        message: '‚úÖ L·∫•y th√¥ng tin l·ªõp th√†nh c√¥ng!',
        data: classItem,
    });
};

export const getDetailClassByUser = async (req, res) => {
    const userId = req.user.id;
    const id = req.params.id;

    // Truy v·∫•n l·ªõp theo id
    const classItem = await db.Class.findOne({ where: { id } });

    if (!classItem) {
        return res.status(404).json({
            message: `Kh√¥ng t√¨m th·∫•y l·ªõp v·ªõi ID: ${id}!`
        });
    }

    const { status } = await db.StudentClassStatus.findOne({
        where: { studentId: userId, classId: id }
    })

    if (!status) {
        status = StudentClassStatus.NOT_JOINED
    }



    return res.status(200).json({
        message: '‚úÖ L·∫•y th√¥ng tin l·ªõp th√†nh c√¥ng!',
        data: classItem,
        studentClassStatus: status
    });
};

// L·∫•y ra danh s√°ch l·ªõp h·ªçc ƒë√£ tham gia ho·∫∑c ƒëang ch·ªù
export const getClassByUser = async (req, res) => {
    const search = req.query.search || '';
    const page = parseInt(req.query.page, 10) || 1;
    const limit = parseInt(req.query.limit, 10) || 10;
    const offset = (page - 1) * limit;

    // L·∫•y userId t·ª´ th√¥ng tin user ƒë∆∞·ª£c x√°c th·ª±c (v√≠ d·ª• t·ª´ token)
    const userId = req.user.id;

    // X√¢y d·ª±ng ƒëi·ªÅu ki·ªán t√¨m ki·∫øm cho b·∫£ng Class
    const whereClause = search.trim() ? {
        [Op.or]: [
            { name: { [Op.like]: `%${search}%` } },
            { description: { [Op.like]: `%${search}%` } },
            { status: { [Op.like]: `%${search}%` } },
        ],
    } : {};

    // Truy v·∫•n c√°c l·ªõp m√† user ƒë√£ tham gia th√¥ng qua b·∫£ng User (v·ªõi alias 'users')
    const classes = await db.StudentClassStatus.findAll({
        where: { studentId: userId },
        include: [
            {
                model: db.Class,
                as: 'class',
                where: whereClause,
            },
        ],
        limit,
        offset,
    });

    const formattedClasses = classes.map(classRecord => {
        const lop = classRecord.class; // L·∫•y t·ª´ alias 'student'
        const status = classRecord.status; // L·∫•y status t·ª´ StudentClassStatus
        return new ResponseClass(lop, status); // Truy·ªÅn v√†o UserResponse
    });
    const total = formattedClasses.length

    return res.status(200).json({
        message: '‚úÖ L·∫•y danh s√°ch l·ªõp theo ng∆∞·ªùi d√πng th√†nh c√¥ng!',
        data: formattedClasses,
        currentPage: page,
        totalPages: Math.ceil(total / limit),
        totalItems: total,
    });
}

// Th√™m m·ªôt l·ªõp h·ªçc m·ªõi
// POST http://localhost:3000/api/v1/class
export const postClass = async (req, res) => {
    const newClass = await Class.create(req.body);
    return res.status(201).json({
        message: 'T·∫°o l·ªõp h·ªçc th√†nh c√¥ng',
        newClass
    });
};

// C·∫≠p nh·∫≠t th√¥ng tin m·ªôt l·ªõp h·ªçc
// PUT http://localhost:3000/api/lop/:id
export const putClass = async (req, res) => {
    // L·∫•y id c·ªßa l·ªõp h·ªçc t·ª´ params
    const { id } = req.params;

    // ƒê·ªãnh nghƒ©a c√°c tr∆∞·ªùng kh√¥ng cho ph√©p c·∫≠p nh·∫≠t, v√≠ d·ª• nh∆∞ c√°c tr∆∞·ªùng h·ªá th·ªëng
    const forbiddenFields = ['id', 'createdAt', 'updatedAt'];

    // L·ªçc c√°c tr∆∞·ªùng h·ª£p l·ªá t·ª´ req.body, lo·∫°i b·ªè nh·ªØng tr∆∞·ªùng b·ªã c·∫•m
    const updatedData = Object.keys(req.body)
        .filter(key => !forbiddenFields.includes(key))
        .reduce((obj, key) => {
            obj[key] = req.body[key];
            return obj;
        }, {});

    // N·∫øu kh√¥ng c√≥ d·ªØ li·ªáu h·ª£p l·ªá n√†o ƒë·ªÉ c·∫≠p nh·∫≠t, tr·∫£ v·ªÅ l·ªói 400
    if (Object.keys(updatedData).length === 0) {
        return res.status(400).json({ message: 'Kh√¥ng c√≥ tr∆∞·ªùng h·ª£p l·ªá ƒë·ªÉ c·∫≠p nh·∫≠t.' });
    }

    // C·∫≠p nh·∫≠t d·ªØ li·ªáu l·ªõp h·ªçc d·ª±a v√†o id
    const [updated] = await Class.update(updatedData, { where: { id } });

    // N·∫øu kh√¥ng c√≥ b·∫£n ghi n√†o ƒë∆∞·ª£c c·∫≠p nh·∫≠t, c√≥ nghƒ©a l√† l·ªõp h·ªçc kh√¥ng t·ªìn t·∫°i, tr·∫£ v·ªÅ l·ªói 404
    if (!updated) {
        return res.status(404).json({ message: 'L·ªõp h·ªçc kh√¥ng t·ªìn t·∫°i' });
    }

    // L·∫•y l·∫°i th√¥ng tin l·ªõp h·ªçc sau khi c·∫≠p nh·∫≠t
    const updatedClass = await Class.findByPk(id);

    // Tr·∫£ v·ªÅ ph·∫£n h·ªìi th√†nh c√¥ng c√πng v·ªõi d·ªØ li·ªáu l·ªõp h·ªçc ƒë√£ ƒë∆∞·ª£c ƒë·ªãnh d·∫°ng
    return res.status(200).json({ message: 'C·∫≠p nh·∫≠t l·ªõp h·ªçc th√†nh c√¥ng', data: new ResponseClass(updatedClass) });
};

// X√≥a m·ªôt l·ªõp h·ªçc theo id
// DELETE http://localhost:3000/api/lop/:id
export const deleteClass = async (req, res) => {
    // L·∫•y id c·ªßa l·ªõp h·ªçc t·ª´ tham s·ªë URL
    const { id } = req.params;

    // Th·ª±c hi·ªán x√≥a l·ªõp h·ªçc d·ª±a theo id
    const deleted = await Class.destroy({ where: { id } });

    // N·∫øu kh√¥ng c√≥ b·∫£n ghi n√†o b·ªã x√≥a, tr·∫£ v·ªÅ l·ªói 404
    if (!deleted) {
        return res.status(404).json({ message: 'L·ªõp h·ªçc kh√¥ng t·ªìn t·∫°i' });
    }

    // N·∫øu x√≥a th√†nh c√¥ng, tr·∫£ v·ªÅ th√¥ng b√°o th√†nh c√¥ng
    return res.status(200).json({ message: 'X√≥a l·ªõp h·ªçc th√†nh c√¥ng' });
};

export const joinClass = async (req, res) => {
    const userId = req.user.id
    const { classId } = req.params

    const { public: isPublic } = await db.Class.findOne({ where: { id: classId } })
    if (!isPublic) {
        return res.status(400).json({ message: 'Kh√¥ng th·ªÉ tham gia l·ªõp h·ªçc n√†y!' });
    }

    const insert = await db.StudentClassStatus.create({
        studentId: userId,
        classId,
        status: StudentClassStatus.WAITED
    })

    if (insert) {
        return res.status(200).json({ message: 'Tham gia l·ªõp h·ªçc th√†nh c√¥ng!' });
    }
    return res.status(500).json({ message: 'Tham gia l·ªõp h·ªçc kh√¥ng th√†nh c√¥ng!' });
}

export const acceptStudentJoinClass = async (req, res) => {
    const { studentId, classId } = req.params

    const update = await db.StudentClassStatus.update({
        status: StudentClassStatus.JOINED
    }, {
        where: {
            studentId,
            classId
        }
    })

    if (update) {
        return res.status(200).json({ message: 'Ch·∫•p nh·∫≠n h·ªçc vi√™n tham gia l·ªõp h·ªçc th√†nh c√¥ng!' });
    }
    return res.status(500).json({ message: 'Ch·∫•p nh·∫≠n h·ªçc vi√™n tham gia l·ªõp h·ªçc kh√¥ng th√†nh c√¥ng!' });
}

export const kickStudentFromClass = async (req, res) => {
    const { studentId, classId } = req.params
    const deleteRecord = await db.StudentClassStatus.destroy({
        where: {
            studentId,
            classId
        }
    })
    if (deleteRecord) {
        return res.status(200).json({ message: 'X√≥a h·ªçc vi√™n kh·ªèi l·ªõp h·ªçc th√†nh c√¥ng!' });
    }
    return res.status(500).json({ message: 'X√≥a h·ªçc vi√™n kh·ªèi l·ªõp h·ªçc kh√¥ng th√†nh c√¥ng!' });
}